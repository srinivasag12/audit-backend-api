CREATE OR REPLACE PROCEDURE AUDIT_STAG_TEST.audit_send_mail_prc (
   p_audit_no        VARCHAR2,
   p_company_id      NUMBER,
   p_from_mail       VARCHAR2,
   p_to_mail         VARCHAR2,
   p_cc_mail         VARCHAR2 DEFAULT NULL,
   p_subject         VARCHAR2,
   p_body            VARCHAR2,
   p_smtp_host    IN VARCHAR2 DEFAULT '3.7.129.172', 
   p_smtp_port    IN NUMBER DEFAULT 587)  --25
AS
  l_mail_conn   UTL_SMTP.connection;
   v_user        VARCHAR2 (30);
   v_err_msg     VARCHAR2 (1000);

    mailIds string(500) := 'r3manager@bsolsystems.com,r1manager@bsolsystems.com';
    Manger1 string(100) := 'r1manager@bsolsystems.com';
    Manger2 string(100) := 'r2manager@bsolsystems.com';
    Manger3 string(100) := 'r3manager@bsolsystems.com';
    Manger4 string(100) := 'auditadmin@bsolsystems.com';
    mangerId string(100);
    manager_officil_id number;
    manager_user_id string(100);
    
    p_to_mail_temp string(1000) := p_to_mail;
    p_cc_mail_temp string(1000) := p_cc_mail;
    
   PRAGMA AUTONOMOUS_TRANSACTION;

   PROCEDURE process_recipients (p_mail_conn   IN OUT UTL_SMTP.connection,
                                 p_list        IN     VARCHAR2)
   AS
      l_tab   string_api.t_split_array;
   BEGIN
      IF TRIM (p_list) IS NOT NULL
      THEN
         l_tab := string_api.split_text (p_list);

         FOR i IN 1 .. l_tab.COUNT
         LOOP
         dbms_output.put_line('Mail has sent');

        UTL_SMTP.rcpt (p_mail_conn, TRIM (l_tab (i)));
         END LOOP;
      END IF;
   END;
BEGIN
   --Code to send email--
  -- 
  /** email id filter for r1 to r3 manager and admin  started **/
   mailIds:= p_to_mail_temp;
  select REGEXP_SUBSTR(mailIds, Manger1 ) into MangerId from dual;
if LENGTH(MangerId) >0 then
 select MANAGER_OFFICIAL_ID into manager_officil_id   from MA_USERS where  USER_ID = MangerId;
          select USER_ID into manager_user_id   from MA_USERS where  OFFICIAL_ID = manager_officil_id;
             mailIds :=  REPLACE(mailIds, Manger1 ,manager_user_id);
 end if;
   
      
   select REGEXP_SUBSTR(mailIds, Manger2 ) into MangerId from dual;
if LENGTH(MangerId) >0 then
          select MANAGER_OFFICIAL_ID into manager_officil_id   from MA_USERS where  USER_ID = MangerId;
          select USER_ID into manager_user_id   from MA_USERS where  OFFICIAL_ID = manager_officil_id;
              mailIds :=  REPLACE(mailIds, Manger2 ,manager_user_id);
                  dbms_output.put_line('Manger2');      dbms_output.put_line(mailIds); 
   end if;
   
   select REGEXP_SUBSTR(mailIds, Manger3 ) into MangerId from dual;
if LENGTH(MangerId) >0 then
          select MANAGER_OFFICIAL_ID into manager_officil_id   from MA_USERS where  USER_ID = MangerId;
          select USER_ID into manager_user_id   from MA_USERS where  OFFICIAL_ID = manager_officil_id;
              mailIds :=  REPLACE(mailIds, Manger3 ,manager_user_id);
                    dbms_output.put_line('Manger3');    dbms_output.put_line(mailIds); 
   end if;
   
   
   select REGEXP_SUBSTR(mailIds, Manger4 ) into MangerId from dual;
if LENGTH(MangerId) >0 then
          
              mailIds :=  REPLACE(mailIds, Manger4 ,'');
              SELECT SUBSTR(mailIds , 1, INSTR(mailIds , ',', -1)-1)
    INTO mailIds 
    FROM dual;
                     dbms_output.put_line('admin');    dbms_output.put_line(mailIds); 
   end if;
   
   p_to_mail_temp := mailIds;
  
 select  trim( both ','  from regexp_replace( replace( trim(mailIds), ' ,', ',' ), '(,){2,}', '\1') )  into p_to_mail_temp
    from dual ;


 mailIds:= p_cc_mail_temp;
  select REGEXP_SUBSTR(mailIds, Manger1 ) into MangerId from dual;
if LENGTH(MangerId) >0 then
 select MANAGER_OFFICIAL_ID into manager_officil_id   from MA_USERS where  USER_ID = MangerId;
          select USER_ID into manager_user_id   from MA_USERS where  OFFICIAL_ID = manager_officil_id;
             mailIds :=  REPLACE(mailIds, Manger1 ,manager_user_id);
 end if;
   
      
   select REGEXP_SUBSTR(mailIds, Manger2 ) into MangerId from dual;
if LENGTH(MangerId) >0 then
          select MANAGER_OFFICIAL_ID into manager_officil_id   from MA_USERS where  USER_ID = MangerId;
          select USER_ID into manager_user_id   from MA_USERS where  OFFICIAL_ID = manager_officil_id;
              mailIds :=  REPLACE(mailIds, Manger2 ,manager_user_id);
                  dbms_output.put_line('Manger2');      dbms_output.put_line(mailIds); 
   end if;
   
   select REGEXP_SUBSTR(mailIds, Manger3 ) into MangerId from dual;
if LENGTH(MangerId) >0 then
          select MANAGER_OFFICIAL_ID into manager_officil_id   from MA_USERS where  USER_ID = MangerId;
          select USER_ID into manager_user_id   from MA_USERS where  OFFICIAL_ID = manager_officil_id;
              mailIds :=  REPLACE(mailIds, Manger3 ,manager_user_id);
                    dbms_output.put_line('Manger3');    dbms_output.put_line(mailIds); 
   end if;
   
   
   select REGEXP_SUBSTR(mailIds, Manger4 ) into MangerId from dual;
if LENGTH(MangerId) >0 then
          
              mailIds :=  REPLACE(mailIds, Manger4 ,'');
              SELECT SUBSTR(mailIds , 1, INSTR(mailIds , ',', -1)-1)
    INTO mailIds 
    FROM dual;
                     dbms_output.put_line('admin');    dbms_output.put_line(mailIds); 
   end if;
   
   p_cc_mail_temp := mailIds;
   
   select  trim( both ','  from regexp_replace( replace( trim(mailIds), ' ,', ',' ), '(,){2,}', '\1') )  into p_cc_mail_temp
    from dual ;
   
   dbms_output.put_line('p_cc_mail_temp'); dbms_output.put_line(p_cc_mail_temp);

  /** email id filter for r1 to r3 manager and admin  ended  **/

 l_mail_conn := UTL_SMTP.open_connection (p_smtp_host, p_smtp_port);
 UTL_SMTP.helo (l_mail_conn, p_smtp_host);   
 --
 
 --utl_smtp.starttls(l_mail_conn);---added bcz ORA-29279: SMTP permanent error: 
--     --530 5.7.0 Must issue a STARTTLS command first

--

 UTL_SMTP.mail (l_mail_conn, p_from_mail);
 process_recipients (l_mail_conn, p_to_mail_temp);
process_recipients (l_mail_conn, p_cc_mail_temp);
--

--   -- process_recipients(l_mail_conn, p_bcc);
--

  UTL_SMTP.open_data (l_mail_conn);

  UTL_SMTP.write_data (
  l_mail_conn,
     'Date: ' || TO_CHAR (SYSDATE, 'DD-MON-YYYY HH24:MI:SS') || UTL_TCP.crlf);
  UTL_SMTP.write_data (l_mail_conn, 'To: ' || p_to_mail_temp || UTL_TCP.crlf);
  
  IF TRIM (p_cc_mail_temp) IS NOT NULL
  THEN
  UTL_SMTP.write_data (
       l_mail_conn,
        'CC: ' || REPLACE (p_cc_mail_temp, ',', ';') || UTL_TCP.crlf);
  END IF;
--
--     --IF TRIM(p_bcc) IS NOT NULL THEN
--     --  UTL_SMTP.write_data(l_mail_conn, 'BCC: ' || REPLACE(p_bcc, ',', ';') || UTL_TCP.crlf);
--     --END IF;

   UTL_SMTP.write_data (l_mail_conn, 'From: ' || p_from_mail || UTL_TCP.crlf);
   UTL_SMTP.write_data (l_mail_conn,
                        'Subject: ' || p_subject || UTL_TCP.crlf);
--      UTL_SMTP.write_data (
--         l_mail_conn,
--         'Reply-To: ' || p_from_mail || UTL_TCP.crlf || UTL_TCP.crlf);

    UTL_SMTP.write_data(l_mail_conn, UTL_TCP.crlf ||P_BODY ||UTL_TCP.crlf || UTL_TCP.crlf);
  
    UTL_SMTP.write_data(l_mail_conn, UTL_TCP.crlf || UTL_TCP.crlf);
   
   UTL_SMTP.close_data (l_mail_conn);
--
   UTL_SMTP.quit (l_mail_conn);

   --end of sending mail--
   SELECT USER INTO v_user FROM DUAL;
dbms_output.put_line('Mail has sent');
   INSERT INTO audit_email_log_dtls (email_seq,
                                     access_link,
                                     from_mail,
                                     to_mail,
                                     cc_mail,
                                     subject,
                                     MESSAGE,
                                     status,
                                     company_id,
                                     user_ins)
        VALUES (audit_email_dtls_seq.NEXTVAL,
                p_audit_no,
                p_from_mail,
                p_to_mail_temp,
                p_cc_mail_temp,
                p_subject,
                p_body,
                'Processed',
                p_company_id,
                v_user);

   COMMIT;
EXCEPTION
   WHEN OTHERS
   THEN
      v_err_msg := SQLERRM;

      INSERT INTO audit_email_log_dtls (email_seq,
                                        access_link,
                                        from_mail,
                                        to_mail,
                                        cc_mail,
                                        subject,
                                        MESSAGE,
                                        status,
                                        error_message,
                                        company_id,
                                        user_ins)
           VALUES (audit_email_dtls_seq.NEXTVAL,
                   p_audit_no,
                   p_from_mail,
                   p_to_mail_temp,
                   p_cc_mail_temp,
                   p_subject,
                   p_body,
                   'Failed',
                   v_err_msg,
                   p_company_id,
                   v_user);

      COMMIT;
dbms_output.put_line(v_err_msg);
END;
/
